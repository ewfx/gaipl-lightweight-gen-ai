package com.hackathon.ipe.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class IncidentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIncidentAllPropertiesEquals(Incident expected, Incident actual) {
        assertIncidentAutoGeneratedPropertiesEquals(expected, actual);
        assertIncidentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIncidentAllUpdatablePropertiesEquals(Incident expected, Incident actual) {
        assertIncidentUpdatableFieldsEquals(expected, actual);
        assertIncidentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIncidentAutoGeneratedPropertiesEquals(Incident expected, Incident actual) {
        assertThat(actual)
            .as("Verify Incident auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIncidentUpdatableFieldsEquals(Incident expected, Incident actual) {
        assertThat(actual)
            .as("Verify Incident relevant properties")
            .satisfies(a -> assertThat(a.getIncidentnum()).as("check incidentnum").isEqualTo(expected.getIncidentnum()))
            .satisfies(a -> assertThat(a.getShortDescription()).as("check shortDescription").isEqualTo(expected.getShortDescription()))
            .satisfies(a -> assertThat(a.getDescrption()).as("check descrption").isEqualTo(expected.getDescrption()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getPriority()).as("check priority").isEqualTo(expected.getPriority()))
            .satisfies(a -> assertThat(a.getOpenedAt()).as("check openedAt").isEqualTo(expected.getOpenedAt()))
            .satisfies(a -> assertThat(a.getResolvedAt()).as("check resolvedAt").isEqualTo(expected.getResolvedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIncidentUpdatableRelationshipsEquals(Incident expected, Incident actual) {
        // empty method
    }
}
